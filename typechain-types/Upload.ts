/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Upload {
  export type AccessStruct = {
    user: PromiseOrValue<string>;
    access: PromiseOrValue<boolean>;
  };

  export type AccessStructOutput = [string, boolean] & {
    user: string;
    access: boolean;
  };
}

export interface UploadInterface extends utils.Interface {
  functions: {
    "add(address,string)": FunctionFragment;
    "allow(address)": FunctionFragment;
    "deployedContractAddress()": FunctionFragment;
    "disAllow(address)": FunctionFragment;
    "display(address)": FunctionFragment;
    "emitContractDeployedEvent(address)": FunctionFragment;
    "shareAccess()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add"
      | "allow"
      | "deployedContractAddress"
      | "disAllow"
      | "display"
      | "emitContractDeployedEvent"
      | "shareAccess"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disAllow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "display",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitContractDeployedEvent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "shareAccess",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployedContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disAllow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "display", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitContractDeployedEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareAccess",
    data: BytesLike
  ): Result;

  events: {
    "ContractDeployed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractDeployed"): EventFragment;
}

export interface ContractDeployedEventObject {
  contractAddress: string;
}
export type ContractDeployedEvent = TypedEvent<
  [string],
  ContractDeployedEventObject
>;

export type ContractDeployedEventFilter =
  TypedEventFilter<ContractDeployedEvent>;

export interface Upload extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UploadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      _user: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allow(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployedContractAddress(overrides?: CallOverrides): Promise<[string]>;

    disAllow(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    display(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    emitContractDeployedEvent(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shareAccess(
      overrides?: CallOverrides
    ): Promise<[Upload.AccessStructOutput[]]>;
  };

  add(
    _user: PromiseOrValue<string>,
    url: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allow(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployedContractAddress(overrides?: CallOverrides): Promise<string>;

  disAllow(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  display(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  emitContractDeployedEvent(
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shareAccess(overrides?: CallOverrides): Promise<Upload.AccessStructOutput[]>;

  callStatic: {
    add(
      _user: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allow(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deployedContractAddress(overrides?: CallOverrides): Promise<string>;

    disAllow(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    display(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    emitContractDeployedEvent(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    shareAccess(
      overrides?: CallOverrides
    ): Promise<Upload.AccessStructOutput[]>;
  };

  filters: {
    "ContractDeployed(address)"(
      contractAddress?: PromiseOrValue<string> | null
    ): ContractDeployedEventFilter;
    ContractDeployed(
      contractAddress?: PromiseOrValue<string> | null
    ): ContractDeployedEventFilter;
  };

  estimateGas: {
    add(
      _user: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allow(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployedContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    disAllow(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    display(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emitContractDeployedEvent(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shareAccess(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _user: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allow(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployedContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disAllow(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    display(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emitContractDeployedEvent(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shareAccess(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
